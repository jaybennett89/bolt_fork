<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>using System.Collections.Generic;

static class IdExtensions {
<# foreach(string id in new string[]{ "PrefabId", "TypeId" }) { #>
	public static void Write<#=id#>(this UdpKit.UdpPacket stream, Bolt.<#=id#> id) {
		stream.WriteIntVB(id.Value);
	}

	public static Bolt.<#=id#> Read<#=id#>(this UdpKit.UdpPacket stream) {
		return new Bolt.<#=id#>(stream.ReadIntVB());
	}
<# } #>
}

<# foreach(string id in new string[]{ "PrefabId", "TypeId" }) { #>
namespace Bolt {
[Documentation]
[System.Serializable]
  public struct <#=id#> {
    public class Comparer : IComparer<<#=id#>> {
      public static readonly Comparer Instance = new Comparer();

      Comparer() {

      }

      int IComparer<<#=id#>>.Compare(<#=id#> x, <#=id#> y) {
        return x.Value - y.Value;
      }
    }

    public class EqualityComparer : IEqualityComparer<<#=id#>> {
      public static readonly EqualityComparer Instance = new EqualityComparer();

      EqualityComparer() {

      }

      bool IEqualityComparer<<#=id#>>.Equals(<#=id#> x, <#=id#> y) {
        return x.Value == y.Value;
      }

      int IEqualityComparer<<#=id#>>.GetHashCode(<#=id#> x) {
        return x.Value;
      }
    }

    public int Value;

    internal <#=id#>(int value) {
      Value = value;
    }

    public override bool Equals(object obj) {
      if (obj is <#=id#>) {
        return this.Value == ((<#=id#>)obj).Value;
      }

      return false;
    }

    public override int GetHashCode() {
      return Value;
    }

    public override string ToString() {
      return string.Format("[<#=id#>:{0}]", Value);
    }

    public static bool operator ==(<#=id#> a, <#=id#> b) {
      return a.Value == b.Value;
    }

    public static bool operator !=(<#=id#> a, <#=id#> b) {
      return a.Value != b.Value;
    }
  }
}
<# } #>