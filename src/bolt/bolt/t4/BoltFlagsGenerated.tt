<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>using UdpKit;

namespace Bolt {

<#

Dictionary<string, string[]> flagList = new Dictionary<string, string[]>();
flagList.Add("StateFlags", new string[]{ "Controlling", "Proxy", "Proxying_Disabled", "Persist_On_Load" });

foreach(var kvp in flagList) {
	var name = kvp.Key;
	var flags = kvp.Value;
#>

public struct <#=name#> {
    public static readonly <#=name#> ZERO = new <#=name#>(0);
    <# for(int i = 0; i < flags.Length; ++i) { #>
public static readonly <#=name#> <#=flags[i].ToUpper()#> = new <#=name#>(<#=(1 << i)#>);
    <# } #>

    readonly int bits;

    public bool IsZero {
      get { return bits == 0; }
    }

    <#=name#> (int val) {
      bits = val;
    }
	
    public override int GetHashCode() {
      return bits;
    }

    public override bool Equals(object obj) {
      if (obj is StateFlags) {
        return bits == ((StateFlags)obj).bits;
      }

      return false;
    }

    public override string ToString() {
	  System.Text.StringBuilder sb = new System.Text.StringBuilder ();
	  sb.Append("[");
	  sb.Append("<#=name#>");

	  
    <# for(int i = 0; i < flags.Length; ++i) { #>
		if((bits & <#=(1 << i)#>) == <#=(1 << i)#>) {
			sb.Append(" <#=flags[i].ToUpper()#>");
		}
	<# } #>

	  sb.Append("]");
	  return sb.ToString();
    }

    public static implicit operator bool (<#=name#> a) {
      return a.bits != 0;
    }

    public static explicit operator int (<#=name#> a) {
      return a.bits;
    }
	
    public static explicit operator <#=name#> (int a) {
      return new <#=name#>(a);
    }

    public static <#=name#> operator & (<#=name#> a, <#=name#> b) {
      return new <#=name#>(a.bits & b.bits);
    }

    public static <#=name#> operator | (<#=name#> a, <#=name#> b) {
      return new <#=name#>(a.bits | b.bits);
    }

    public static <#=name#> operator ^ (<#=name#> a, <#=name#> b) {
      return new <#=name#>(a.bits ^ b.bits);
    }

    public static <#=name#> operator ~ (<#=name#> a) {
      return new <#=name#>(~a.bits);
    }
	
    public static bool operator ==(StateFlags a, StateFlags b) {
      return a.bits == b.bits;
    }

    public static bool operator !=(StateFlags a, StateFlags b) {
      return a.bits != b.bits;
    }

    //public void Pack (UdpStream stream, int bitCount) {
    //  stream.WriteInt(bits, bitCount);
    //}
	//
    //public static <#=name#> Read (UdpStream stream, int bitCount) {
    //  return new <#=name#>(stream.ReadInt(bitCount));
    //}
  }

<# } #>
}