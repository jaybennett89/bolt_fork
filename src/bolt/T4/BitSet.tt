<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
const int SIZE = 16;
#>

using System;

namespace Bolt {

	public class BitSet : BoltObject {
		public const int BITSET_LONGS = <#=SIZE#>;
		internal static readonly BitSet Full;

		static BitSet() {
		  Full = new BitSet();
		  
			<# for(int i = 0; i < SIZE; ++i) { #>
			Full.Bits<#=i#> |= ulong.MaxValue; 
			<# } #>
		}


		<# for(int i = 0; i < SIZE; ++i) { #>
			ulong Bits<#=i#>;
		<# } #>

		public BitSet(
		
			<# for(int i = 0; i < SIZE; ++i) { #>
			
				ulong bits<#=i#>

				<# if(i + 1 < SIZE) { #> , <# } #>

			<# } #>
		) {
			<# for(int i = 0; i < SIZE; ++i) { #>
				this.Bits<#=i#> = bits<#=i#>;
			<# } #>
		}
		
		

		public BitSet() {
		}

		public bool IsZero {
		  get {
			return
				<# for(int i = 0; i < SIZE; ++i) { #>
				(this.Bits<#=i#> == 0UL) &&
				<# } #>
				true;
		  }
		}

		public void Set(int bit) {
		  switch (bit / 64) {
			
			<# for(int i = 0; i < SIZE; ++i) { #>
			case <#=i#>: this.Bits<#=i#> |= (1UL << (bit % 64)); break;
			<# } #>

			default:
			  throw new IndexOutOfRangeException();
		  }

		  Assert.False(IsZero);
		}

		public void Clear(int bit) {
		  switch (bit / 64) {

			<# for(int i = 0; i < SIZE; ++i) { #>
			case <#=i#>: this.Bits<#=i#> &= ~(1UL << (bit % 64)); break;
			<# } #>

			default:
			  throw new IndexOutOfRangeException();
		  }
		}


		public void Combine(BitSet other) {
			<# for(int i = 0; i < SIZE; ++i) { #>
			this.Bits<#=i#> |= other.Bits<#=i#>;
			<# } #>
		}

		public void ClearAll() {
			<# for(int i = 0; i < SIZE; ++i) { #>
			this.Bits<#=i#> = 0UL;
			<# } #>
		}
		
		public bool IsSet(int bit) {
		  ulong b = 1UL << (bit % 64); 

		  switch (bit / 64) {

			<# for(int i = 0; i < SIZE; ++i) { #>
			case <#=i#>: return (this.Bits<#=i#> & b) == b;
			<# } #>

			default:
			  throw new IndexOutOfRangeException();
		  }
		}
		
		
		public ulong this[int index] {
		  get { 
		  switch(index) {
			<# for(int i = 0; i < SIZE; ++i) { #>
			case <#=i#>: return this.Bits<#=i#>;
			<# } #>
			
			default:
			  throw new IndexOutOfRangeException();
		  }
		  }
		  set {
		  switch(index) {
			<# for(int i = 0; i < SIZE; ++i) { #>
			case <#=i#>: this.Bits<#=i#> = value; break;
			<# } #>
			
			default:
			  throw new IndexOutOfRangeException();
		  }
		  }
		}
	}
}